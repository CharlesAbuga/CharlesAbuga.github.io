"DQ8HLGFzc2V0cy9maWxlL0N1cnJpY3VsdW0gVml0YWUgQ2hhcmxlcyAoMykucGRmDAENAQcFYXNzZXQHLGFzc2V0cy9maWxlL0N1cnJpY3VsdW0gVml0YWUgQ2hhcmxlcyAoMykucGRmBzdhc3NldHMvZm9udHMvTm90b1NhbnMtSXRhbGljLVZhcmlhYmxlRm9udF93ZHRoLHdnaHQudHRmDAENAQcFYXNzZXQHN2Fzc2V0cy9mb250cy9Ob3RvU2Fucy1JdGFsaWMtVmFyaWFibGVGb250X3dkdGgsd2dodC50dGYHF2Fzc2V0cy9pbWFnZXMvLkRTX1N0b3JlDAENAQcFYXNzZXQHF2Fzc2V0cy9pbWFnZXMvLkRTX1N0b3JlBxthc3NldHMvaW1hZ2VzL0RhcnQtbG9nby5wbmcMAQ0BBwVhc3NldAcbYXNzZXRzL2ltYWdlcy9EYXJ0LWxvZ28ucG5nByVhc3NldHMvaW1hZ2VzL0xvZ29tYXJrX0Z1bGwgQ29sb3IucG5nDAENAQcFYXNzZXQHJWFzc2V0cy9pbWFnZXMvTG9nb21hcmtfRnVsbCBDb2xvci5wbmcHGWFzc2V0cy9pbWFnZXMvTXlJbWFnZS5QTkcMAQ0BBwVhc3NldAcZYXNzZXRzL2ltYWdlcy9NeUltYWdlLlBORwcnYXNzZXRzL2ltYWdlcy9TY3JlZW5zaG90XzE3MjIzMjg3NzEucG5nDAENAQcFYXNzZXQHJ2Fzc2V0cy9pbWFnZXMvU2NyZWVuc2hvdF8xNzIyMzI4NzcxLnBuZwclYXNzZXRzL2ltYWdlcy9ob21lcGFnZV9zY3JlZW5zaG90LnBuZwwBDQEHBWFzc2V0ByVhc3NldHMvaW1hZ2VzL2hvbWVwYWdlX3NjcmVlbnNob3QucG5nByFhc3NldHMvaW1hZ2VzL3BuZ3dpbmcuY29tICg0KS5wbmcMAQ0BBwVhc3NldAchYXNzZXRzL2ltYWdlcy9wbmd3aW5nLmNvbSAoNCkucG5nByFhc3NldHMvaW1hZ2VzL3BuZ3dpbmcuY29tICg1KS5wbmcMAQ0BBwVhc3NldAchYXNzZXRzL2ltYWdlcy9wbmd3aW5nLmNvbSAoNSkucG5nByFhc3NldHMvaW1hZ2VzL3BuZ3dpbmcuY29tICg2KS5wbmcMAQ0BBwVhc3NldAchYXNzZXRzL2ltYWdlcy9wbmd3aW5nLmNvbSAoNikucG5nBzJwYWNrYWdlcy9jdXBlcnRpbm9faWNvbnMvYXNzZXRzL0N1cGVydGlub0ljb25zLnR0ZgwBDQEHBWFzc2V0BzJwYWNrYWdlcy9jdXBlcnRpbm9faWNvbnMvYXNzZXRzL0N1cGVydGlub0ljb25zLnR0Zgc5cGFja2FnZXMvZm9udF9hd2Vzb21lX2ZsdXR0ZXIvbGliL2ZvbnRzL2ZhLWJyYW5kcy00MDAudHRmDAENAQcFYXNzZXQHOXBhY2thZ2VzL2ZvbnRfYXdlc29tZV9mbHV0dGVyL2xpYi9mb250cy9mYS1icmFuZHMtNDAwLnR0Zgc6cGFja2FnZXMvZm9udF9hd2Vzb21lX2ZsdXR0ZXIvbGliL2ZvbnRzL2ZhLXJlZ3VsYXItNDAwLnR0ZgwBDQEHBWFzc2V0BzpwYWNrYWdlcy9mb250X2F3ZXNvbWVfZmx1dHRlci9saWIvZm9udHMvZmEtcmVndWxhci00MDAudHRmBzhwYWNrYWdlcy9mb250X2F3ZXNvbWVfZmx1dHRlci9saWIvZm9udHMvZmEtc29saWQtOTAwLnR0ZgwBDQEHBWFzc2V0BzhwYWNrYWdlcy9mb250X2F3ZXNvbWVfZmx1dHRlci9saWIvZm9udHMvZmEtc29saWQtOTAwLnR0Zg=="