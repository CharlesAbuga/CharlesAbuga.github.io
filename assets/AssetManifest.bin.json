"DQ4HN2Fzc2V0cy9mb250cy9Ob3RvU2Fucy1JdGFsaWMtVmFyaWFibGVGb250X3dkdGgsd2dodC50dGYMAQ0BBwVhc3NldAc3YXNzZXRzL2ZvbnRzL05vdG9TYW5zLUl0YWxpYy1WYXJpYWJsZUZvbnRfd2R0aCx3Z2h0LnR0ZgcXYXNzZXRzL2ltYWdlcy8uRFNfU3RvcmUMAQ0BBwVhc3NldAcXYXNzZXRzL2ltYWdlcy8uRFNfU3RvcmUHG2Fzc2V0cy9pbWFnZXMvRGFydC1sb2dvLnBuZwwBDQEHBWFzc2V0Bxthc3NldHMvaW1hZ2VzL0RhcnQtbG9nby5wbmcHJWFzc2V0cy9pbWFnZXMvTG9nb21hcmtfRnVsbCBDb2xvci5wbmcMAQ0BBwVhc3NldAclYXNzZXRzL2ltYWdlcy9Mb2dvbWFya19GdWxsIENvbG9yLnBuZwcZYXNzZXRzL2ltYWdlcy9NeUltYWdlLlBORwwBDQEHBWFzc2V0Bxlhc3NldHMvaW1hZ2VzL015SW1hZ2UuUE5HBydhc3NldHMvaW1hZ2VzL1NjcmVlbnNob3RfMTcyMjMyODc3MS5wbmcMAQ0BBwVhc3NldAcnYXNzZXRzL2ltYWdlcy9TY3JlZW5zaG90XzE3MjIzMjg3NzEucG5nByVhc3NldHMvaW1hZ2VzL2hvbWVwYWdlX3NjcmVlbnNob3QucG5nDAENAQcFYXNzZXQHJWFzc2V0cy9pbWFnZXMvaG9tZXBhZ2Vfc2NyZWVuc2hvdC5wbmcHIWFzc2V0cy9pbWFnZXMvcG5nd2luZy5jb20gKDQpLnBuZwwBDQEHBWFzc2V0ByFhc3NldHMvaW1hZ2VzL3BuZ3dpbmcuY29tICg0KS5wbmcHIWFzc2V0cy9pbWFnZXMvcG5nd2luZy5jb20gKDUpLnBuZwwBDQEHBWFzc2V0ByFhc3NldHMvaW1hZ2VzL3BuZ3dpbmcuY29tICg1KS5wbmcHIWFzc2V0cy9pbWFnZXMvcG5nd2luZy5jb20gKDYpLnBuZwwBDQEHBWFzc2V0ByFhc3NldHMvaW1hZ2VzL3BuZ3dpbmcuY29tICg2KS5wbmcHMnBhY2thZ2VzL2N1cGVydGlub19pY29ucy9hc3NldHMvQ3VwZXJ0aW5vSWNvbnMudHRmDAENAQcFYXNzZXQHMnBhY2thZ2VzL2N1cGVydGlub19pY29ucy9hc3NldHMvQ3VwZXJ0aW5vSWNvbnMudHRmBzlwYWNrYWdlcy9mb250X2F3ZXNvbWVfZmx1dHRlci9saWIvZm9udHMvZmEtYnJhbmRzLTQwMC50dGYMAQ0BBwVhc3NldAc5cGFja2FnZXMvZm9udF9hd2Vzb21lX2ZsdXR0ZXIvbGliL2ZvbnRzL2ZhLWJyYW5kcy00MDAudHRmBzpwYWNrYWdlcy9mb250X2F3ZXNvbWVfZmx1dHRlci9saWIvZm9udHMvZmEtcmVndWxhci00MDAudHRmDAENAQcFYXNzZXQHOnBhY2thZ2VzL2ZvbnRfYXdlc29tZV9mbHV0dGVyL2xpYi9mb250cy9mYS1yZWd1bGFyLTQwMC50dGYHOHBhY2thZ2VzL2ZvbnRfYXdlc29tZV9mbHV0dGVyL2xpYi9mb250cy9mYS1zb2xpZC05MDAudHRmDAENAQcFYXNzZXQHOHBhY2thZ2VzL2ZvbnRfYXdlc29tZV9mbHV0dGVyL2xpYi9mb250cy9mYS1zb2xpZC05MDAudHRm"